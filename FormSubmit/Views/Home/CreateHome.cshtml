@{
    ViewData["Title"] = "Privacy Policy";
}

<style>
    .layout {
        border: aquamarine 1px solid;
        min-height: 50px;
        z-index: 999;
    }

        .layout:hover {
            border: black 1px solid;
        }

    .layout2 {
        border: aquamarine 1px solid;
        min-height: 50px;
        z-index: 999;
    }

        .layout2:hover {
            border: black 1px solid;
        }

    .layout3 {
        border: aquamarine 1px solid;
        min-height: 50px;
        z-index: 999;
    }

        .layout3:hover {
            border: black 1px solid;
        }

    .T_form-group:hover, .T_form-check:hover {
        border: black 1px solid;
    }

</style>



<div class="wrapper row">
    <div class="col-md-2">
        <div class="card-header">
            Layout
        </div>

        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="Layout1">
            <span>One Column Layout</span>
        </div>

        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="Layout2">
            <span>Two Column Layout</span>
        </div>

        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="Layout3">
            <span>Three Column Layout</span>
        </div>


        <div class="card-header">
            Widgets
        </div>

        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="InputText">
            <span>Text Box</span>
        </div>

        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="InputRadio">
            <span> Radio </span>
        </div>

        @*<div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="Clock">
                <span> Clock </span>
            </div>*@

        <div>
            <button class="btn btn-primary" id="SaveFormData">Save Form Data</button>
        </div>
    </div>

    <div class="col-md-8">
        <div id="drawflow" ondrop="onNormalDrop(event)" ondragover="allowDrop(event)" style="overflow: auto;">

        </div>
    </div>
    <div class="col-md-2" id="SideInput" style="display: none;">
        <div class="form-group JS_Height" style="display: block;">
            <label for="Height">Height in px</label>
            <input type="text" class="form-control" id="Height" placeholder="">
        </div>

        <div class="form-group JS_Width" style="display: block;">
            <label for="Width">Width in px</label>
            <input type="text" class="form-control" id="Width" placeholder="">
        </div>

        <div class="form-group JS_PositionX" style="display: block;">
            <label for="Width">Position X in px</label>
            <input type="text" class="form-control" id="PositionX" placeholder="">
        </div>

        <div class="form-group JS_PositionY" style="display: block;">
            <label for="Width">Position Y in px</label>
            <input type="text" class="form-control" id="PositionY" placeholder="">
        </div>

        <div class="form-group JS_InputLabel">
            <label for="Width">Input Label</label>
            <input type="text" class="form-control" id="InputLabel" placeholder="">
        </div>
        <div class="form-group JS_InputValue">
            <label for="InputValue">Input Value</label>
            <input type="text" class="form-control" id="InputValue" placeholder="Enter Text">
        </div>
        <div class="form-group JS_RadioName">
            <label for="RadioName">Group Name</label>
            <input type="text" class="form-control" id="RadioName" placeholder="Enter Radio Group Name">
        </div>

        <div>
            <button class="btn btn-primary" id="UpdateWidget">Update Widget</button>
        </div>

    </div>

</div>


<div id="FromDetails" class="modal fade" role="dialog" style="z-index: 1050 !important">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="FormName">Form Name</label>
                    <input type="text" class="form-control" id="FormName" placeholder="Enter Text">
                </div>
                <div class="form-group">
                    <label for="FormDescrition">Description</label>
                    <input type="text" class="form-control" id="FormDescrition" placeholder="Enter Text">
                </div>
            </div>
            <div class="modal-footer">
                <button id="FormDetailSave" type="button" class="btn btn-default">Save</button>
            </div>
        </div>

    </div>
</div>

<input type="hidden" id="CurrentSelect" value="" />
<script>

    var MyData = [];

    var DisplayOrder = 0;

    var SelectedInput = null;

    var LayoutDrop = {
        Id : "",
        isLayoutDrop: false,
        LayoutType: 0,
        ColumnNo: 0
    }; 

    // For allowing drop
    function allowDrop(ev) {
        ev.preventDefault();
    }

    //When Elm DragStart
    function drag(ev) {
        ev.dataTransfer.setData("node", ev.target.getAttribute('data-node'));
    }

    //When Elm is droped
    function onNormalDrop(ev) {
        ev.preventDefault();
        const data = ev.dataTransfer.getData("node");
        LayoutDrop.isLayoutDrop = false;
        dropElement(data);
        return false;
    }

    function onLayoutDrop(ev)
    {
        ev.preventDefault();
        ev.stopPropagation();

        const elm = $(ev.target);
        const id = elm.attr("data-dropId");
        const layoutType = elm.attr("data-LayoutType");
        const columnNo = elm.attr("data-columnNo");

        const data = ev.dataTransfer.getData("node");

        LayoutDrop.isLayoutDrop = true;
        LayoutDrop.Id = id;
        LayoutDrop.LayoutType = layoutType;
        LayoutDrop.ColumnNo = columnNo;

        dropElement(data);
        return false;
    }

    function dropElement(data) {

        switch (data) {
        case "InputText":
            $("#CurrentSelect").val("InputText");
            $("#SideInput").hide();
            TextSave();
            break;
        case "InputRadio":
            $("#CurrentSelect").val("InputRadio");
            RadioSave();
            $("#SideInput").hide();
            break;
        case "Clock":
            $("#CurrentSelect").val("Clock");
            ClockSave();
            $("#SideInput").hide();
            break;
        case "Layout1":
            LayoutSave("Layout1");
            $("#SideInput").hide();
            break;
        case "Layout2":
            LayoutSave("Layout2");
            $("#SideInput").hide();
            break;
        case "Layout3":
            LayoutSave("Layout3");
            $("#SideInput").hide();
            break;
        }

        return false;
    }

    //For Creating a random guid id
    function createGuid() {
        function S4() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }

        return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
    }

    // Region For Different Template Add to View Port

    function TextSave(label = "Label for text box", elmId = null) {
        let guid = createGuid();

        const InputLabel = label;

        const MarkUp = `
                     <div class="form-group T_form-group JS_FormWidget" data-widgetId="${elmId == null ? guid : elmId}" >
                        <label class="Js_Lbl" for="${elmId == null ? guid : elmId}">${InputLabel}</label>
                        <input type="text" class="form-control" id="${elmId == null ? guid : elmId}" placeholder="Enter Text">
                     </div>`;

        if (elmId == null) {

            DisplayOrder++;

            const data = {
                guid: guid,
                Type: "InputText",
                DisplayOrder: DisplayOrder,
                LayoutId: "",
                LayoutType: "0",
                LayoutColumn: "0",
                InputLabel: InputLabel
            };

            if (LayoutDrop.isLayoutDrop) {
                $(`#${LayoutDrop.Id}`).append(MarkUp);
                data.LayoutId = LayoutDrop.Id;
                data.LayoutType = LayoutDrop.LayoutType;
                data.LayoutColumn = LayoutDrop.ColumnNo;
            }
            else {
                $("#drawflow").append(MarkUp);
            }

            MyData.push(data);
            SetFormData();

        }
        else {
            GetFormData();

            var currentItem = MyData.filter(x => x.guid == elmId);

            const data = {
                guid: elmId,
                Type: "InputText",
                DisplayOrder: currentItem[0].DisplayOrder,
                InputLabel: InputLabel,
                LayoutId: currentItem[0].LayoutId,
                LayoutType: currentItem[0].LayoutType,
                LayoutColumn :currentItem[0].ColumnNo
            };

            MyData = MyData.filter(x => x.guid != elmId);

            MyData.push(data);
            SetFormData();

            $(`#${elmId}`).siblings(".Js_Lbl").html(label);
        }

        return true;
    }

    function RadioSave(label = "Radio Label",value="0",group="",elmId= null) {

        const guid = createGuid();

        const MarkUp = `
                     <div class="form-check T_form-check JS_FormWidget" data-widgetId="${elmId == null ? guid : elmId}">
                      <input class="form-check-input" type="radio" name="${group}" id="${elmId == null ? guid : elmId}" value="${value}" checked>
                      <label class="form-check-label Js_Lbl" for="${value}">
                        ${label}
                      </label>
                    </div>`;
        

        if (elmId == null) {
            DisplayOrder++;
            const data = {
                guid: guid,
                value: value,
                Type: "InputRadio",
                DisplayOrder: DisplayOrder,
                InputLabel: label,
                InputName: group,
                LayoutId: "",
                LayoutType: "0",
                LayoutColumn:"0"
            };

            if (LayoutDrop.isLayoutDrop) {
                $(`#${LayoutDrop.Id}`).append(MarkUp);
                data.LayoutId = LayoutDrop.Id;
                data.LayoutType = LayoutDrop.LayoutType;
                data.LayoutColumn = LayoutDrop.ColumnNo;
            }
            else {
                $("#drawflow").append(MarkUp);
            }

            MyData.push(data);

            SetFormData();
        }
        else {

            GetFormData();

            var currentItem = MyData.filter(x => x.guid == elmId);

            const data = {
                guid: elmId,
                value: value,
                Type: "InputRadio",
                DisplayOrder: currentItem[0].DisplayOrder,
                InputLabel: label,
                InputName: group,
                LayoutId: currentItem[0].LayoutId,
                LayoutType: currentItem[0].LayoutType,
                LayoutColumn: currentItem[0].ColumnNo
            };

            MyData = MyData.filter(x => x.guid != elmId);
            
            MyData.push(data);
            SetFormData();

            $(`#${elmId}`).siblings(".Js_Lbl").html(label);
            $(`#${elmId}`).attr('name', group);
            $(`#${elmId}`).val(value);
        }

        return true;
    }

    function ClockSave() {
        let height = $("#Height").val();
        let width = $("#Width").val();
        let positionX = $("#PositionX").val();
        let positionY = $("#PositionY").val();
        const inputVal = $("#InputValue").val();
        const inputLabel = $("#InputLabel").val();
        const inputName = $("#RadioName").val();

        if (width == null || width === "" || width === 0) {
            width = 200;
        }

        if (height == null || height === "" || height === 0) {
            height = 200;
        }

        if (positionX == null || positionX === "" || positionX === 0) {
            positionX = 0;
        }

        if (positionY == null || positionY === "" || positionY === 0) {
            positionY = 0;
        }

        var guid = createGuid();
        const MarkUp = `
            <div style="position: relative;top: ${positionY}px;left: ${positionX}px;">
                <canvas id="${guid}" width="${width}" height="${height}" style="background-color:#333">
            </div>`;

        $("#drawflow").append(MarkUp);

        setTimeout(function () {
            const canvas = document.getElementById(guid);
            var ctx = canvas.getContext("2d");
            var radius = canvas.height / 2;
            ctx.translate(radius, radius);
            radius = radius * 0.90;

            setInterval(function () { drawClock(ctx, radius); }, 1000);
        }, 1000);

        const data = {
            guid: createGuid(),
            value: inputVal,
            Type: "Clock",
            DisplayOrder: DisplayOrder + 1,
            InputLabel: inputLabel,
            InputName: inputName,
            Height: height,
            Width: width,
            PositionX: positionX,
            PositionY: PositionY
        };

        MyData.push(data);

        SetFormData();

        return true;
    }

    function LayoutSave(name) {
        const guid = createGuid();

        var MarkUp = "";
        var LayoutType = "";
        var Type = "";
        switch (name) {
            case "Layout1":
                MarkUp = `
                     <div class="col-md-12 layout" id="${guid}" data-dropId="${guid}" data-LayoutType="1" data-columnNo="0" ondrop="onLayoutDrop(event)" ondragover="allowDrop(event)" data-Layout="Layout1">

                     </div>`;

                LayoutType = "1";
                Type = "Layout1";
                break;
            case "Layout2":
                MarkUp = `
                     <div class="col-md-12 layout" id="${guid}" data-Layout="Layout2">
                        <div class="row">
                            <div class="col-md-6 layout2 js_layout_col_1" id="${guid + "_1"}" data-dropId="${guid + "_1"}" data-columnNo="1" data-LayoutType="2" ondrop="onLayoutDrop(event)" ondragover="allowDrop(event)" >

                            </div>
                            <div class="col-md-6 layout2 js_layout_col_2" id="${guid + "_2"}" data-dropId="${guid + "_2"}" data-columnNo="2" data-LayoutType="2" ondrop="onLayoutDrop(event)" ondragover="allowDrop(event)">

                            </div>
                        </div>
                     </div>`;
                LayoutType = "2";
                Type = "Layout2";
                break;
            case "Layout3":
                MarkUp = `
                     <div class="col-md-12 layout" id="${guid}" data-Layout="Layout3">
                        <div class="row">
                            <div class="col-md-4 layout3 js_layout_col_1" id="${guid + "_1"}" data-dropId="${guid + "_1"}" data-columnNo="1" data-LayoutType="3" ondrop="onLayoutDrop(event)" ondragover="allowDrop(event)">
                                                                                                                           
                            </div>                                                                                         
                            <div class="col-md-4 layout3 js_layout_col_2" id="${guid + "_2"}" data-dropId="${guid + "_2"}" data-columnNo="2" data-LayoutType="3" ondrop="onLayoutDrop(event)" ondragover="allowDrop(event)">
                                                                                                                           
                            </div>                                                                                         
                            <div class="col-md-4 layout3 js_layout_col_3" id="${guid + "_3"}" data-dropId="${guid + "_3"}" data-columnNo="3" data-LayoutType="3" ondrop="onLayoutDrop(event)" ondragover="allowDrop(event)">

                            </div>
                        </div>
                     </div>`;
                LayoutType = "3";
                Type = "Layout3";
                break;
            default:
        }

        DisplayOrder++;
        const data = {
            guid: guid,
            Type: Type,
            DisplayOrder: DisplayOrder,
            LayoutType: LayoutType
        };

        MyData.push(data);
        SetFormData();

        $("#drawflow").append(MarkUp);
        return true;
    }

    // Region end Different Template Add to View Port

    //For Saving Layout Detail to local storage
    function SetFormData() {
        window.localStorage.setItem("FromData", JSON.stringify(MyData));
    }

    //For Getting Layout Detail from local storage
    function GetFormData() {
        MyData = JSON.parse(window.localStorage.getItem("FromData"));
    }

    // To show side input fields
    function ShowInputFieldsShow(name,IsShow = false) {
        if (!IsShow) {
            $("#SideInput").hide();
            return false;
        }
        $("#SideInput").show();
        hideIndividualFields();

        switch (name) {
            case "InputText":
                $(".JS_InputLabel").show();
                break;
            case "InputRadio":
                $(".JS_InputLabel").show();
                $(".JS_InputValue").show();
                $(".JS_RadioName").show();
                break;
        }

        return true;
    }

    // Hide All Side Input Detail Fields 
    function hideIndividualFields() {
        $(".JS_InputLabel").hide();
        $(".JS_InputValue").hide();
        $(".JS_RadioName").hide();
        $(".JS_Height").hide();
        $(".JS_Width").hide();
        $(".JS_PositionX").hide();
        $(".JS_PositionY").hide();
    }

    // When and elm is selected this function is called 
    $(document).on("click", ".JS_FormWidget", function () {
        const elm = $(this);
        SelectedInput = elm;
        const widgetId = elm.attr("data-widgetId");

        GetFormData();

        let Input = JSON.parse(JSON.stringify(MyData.filter(x => x.guid == widgetId)));
        if (Input.length > 0) {
            Input = Input[0];
        }
        else {
            return false;
        }

        if (Input.Type == "InputText") {
            $("#CurrentSelect").val("InputText");
            $("#InputLabel").val(Input.InputLabel);
            ShowInputFieldsShow(Input.Type, true);
        }
        else if (Input.Type == "InputRadio") {
            $("#CurrentSelect").val("InputRadio");
            $("#InputLabel").val(Input.InputLabel);
            $("#RadioName").val(Input.InputName);
            $("#InputValue").val(Input.value);

            ShowInputFieldsShow(Input.Type, true);
        }

    });

    // For updating the added widget 
    $("#UpdateWidget").on("click", function () {

        const data = $("#CurrentSelect").val();
        var check = true;
        var elm_Id;
        var InputLabel;
        switch (data) {
            case "InputText":
                InputLabel = $("#InputLabel").val();

                if (InputLabel == undefined || InputLabel == null || InputLabel == "") {
                    alert("Plase Enter Input Label");
                    return false;
                }

                elm_Id = SelectedInput.attr("data-widgetId");

                check = TextSave(InputLabel, elm_Id);
                break;
            case "InputRadio":
                var  InputVal = $("#InputValue").val();
                InputLabel = $("#InputLabel").val();
                var  InputName = $("#RadioName").val();

                if (InputVal == undefined || InputVal == null || InputVal == "") {
                    alert("Plase Enter Input Value");
                    return false;
                }

                if (InputLabel == undefined || InputLabel == null || InputLabel == "") {
                    alert("Plase Enter Input Label");
                    return false;
                }

                if (InputName == undefined || InputName == null || InputName == "") {
                    alert("Plase Enter Radio Group Name");
                    return false;
                }
                elm_Id = SelectedInput.attr("data-widgetId");
                check = RadioSave(InputLabel, InputVal, InputName, elm_Id);
                break;
            case "Clock":
                check = ClockSave();
                break;
            case "Layout1":
                check = LayoutSave("Layout1");
                break;
            case "Layout12":
                check = LayoutSave("Layout2");
                break;
        }

        if (!check) return false;

        $("#SideInput").hide();
        return false;
    });

    // To open From Detail Model
    $("#SaveFormData").on("click", function (e) {

        GetFormData();

        if (MyData == undefined || MyData == null || MyData.length == 0) {
            alert("Please Add a Form Elemet to the canvas.");
            return false;
        }

        $("#FromDetails").modal('show');

        e.preventDefault();
    });

    // On Save Form Data Click Data Send to Backend
    $("#FormDetailSave").on('click', function () {

        var elm = $(this);

        elm.attr("disable", true);

        const Name = $("#FormName").val();
        const Desc = $("#FormDescrition").val();

        const url = location.origin + "/Home/SaveFormData";

        GetFormData();

        const formDetail = {
            Name: Name,
            Description: Desc,
            FormData: MyData
        };

        $.ajax({
            type: "POST",
            url: url,
            data: JSON.stringify(formDetail),
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (response) {
                elm.attr("disable", false);
                if (response !== "200") {
                    alert("Some Error occur.");
                    $("#FromDetails").modal('hide');
                }
                else {
                    alert("Success");
                    $("#FromDetails").modal('hide');

                    window.localStorage.clear();

                    window.location.href = window.location.origin+"/Home";
                }

                return false;
            },
            failure: function () {
                elm.attr("disable", false);
            },
            error: function () {
                elm.attr("disable", false);
            }
        });
    });

    // For Clock Widget Add
    function drawClock(ctx, radius) {
        drawFace(ctx, radius);
        drawNumbers(ctx, radius);
        drawTime(ctx, radius);
    }

    function drawFace(ctx, radius) {
        var grad;
        ctx.beginPath();
        ctx.arc(0, 0, radius, 0, 2 * Math.PI);
        ctx.fillStyle = 'white';
        ctx.fill();
        grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);
        grad.addColorStop(0, '#333');
        grad.addColorStop(0.5, 'white');
        grad.addColorStop(1, '#333');
        ctx.strokeStyle = grad;
        ctx.lineWidth = radius * 0.1;
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);
        ctx.fillStyle = '#333';
        ctx.fill();
    }

    function drawNumbers(ctx, radius) {
        var ang;
        var num;
        ctx.font = radius * 0.15 + "px arial";
        ctx.textBaseline = "middle";
        ctx.textAlign = "center";
        for (num = 1; num < 13; num++) {
            ang = num * Math.PI / 6;
            ctx.rotate(ang);
            ctx.translate(0, -radius * 0.85);
            ctx.rotate(-ang);
            ctx.fillText(num.toString(), 0, 0);
            ctx.rotate(ang);
            ctx.translate(0, radius * 0.85);
            ctx.rotate(-ang);
        }
    }

    function drawTime(ctx, radius) {
        var now = new Date();
        var hour = now.getHours();
        var minute = now.getMinutes();
        var second = now.getSeconds();
        //hour
        hour = hour % 12;
        hour = (hour * Math.PI / 6) +
            (minute * Math.PI / (6 * 60)) +
            (second * Math.PI / (360 * 60));
        drawHand(ctx, hour, radius * 0.5, radius * 0.07);
        //minute
        minute = (minute * Math.PI / 30) + (second * Math.PI / (30 * 60));
        drawHand(ctx, minute, radius * 0.8, radius * 0.07);
        // second
        second = (second * Math.PI / 30);
        drawHand(ctx, second, radius * 0.9, radius * 0.02);
    }

    function drawHand(ctx, pos, length, width) {
        ctx.beginPath();
        ctx.lineWidth = width;
        ctx.lineCap = "round";
        ctx.moveTo(0, 0);
        ctx.rotate(pos);
        ctx.lineTo(0, -length);
        ctx.stroke();
        ctx.rotate(-pos);
    }
    // For Clock Widget Add end 

</script>
